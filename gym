class Customer:
    id = 0

    def __init__(self, name: str, address: str, email: str):
        self.name = name
        self.address = address
        self.email = email
        self.id = self.get_next_id()

    @staticmethod
    def get_next_id():
        Customer.id += 1
        return Customer.id

    def __repr__(self):
        return f"Customer <{self.id}> {self.name}; Address: {self.address}; Email: {self.email}"

class Equipment:
    id = 0

    def __init__(self, name):
        self.name = name
        self.id = self.get_next_id()

    @staticmethod
    def get_next_id():
        Equipment.id += 1
        return Equipment.id

    def __repr__(self):
        return f"Equipment <{self.id}> {self.name}"

class ExercisePlan:
    id = 0

    def __init__(self, trainer_id: int, equipment_id: int, duration: int):
        self.trainer_id = trainer_id
        self.equipment_id = equipment_id
        self.duration = duration
        self.id = self.get_next_id()

    @classmethod
    def from_hours(cls, trainer_id:int, equipment_id:int, hours:int):
        duration = hours * 60
        return cls(trainer_id, equipment_id, duration)

    @staticmethod
    def get_next_id():
        ExercisePlan.id += 1
        return ExercisePlan.id

    def __repr__(self):
        return f"Plan <{self.id}> with duration {self.duration} minutes"
   from gym.customer import Customer
from gym.equipment import Equipment
from gym.exercise_plan import ExercisePlan
from gym.subscription import Subscription
from gym.trainer import Trainer


class Gym:
    def __init__(self):
        self.customers = []
        self.trainers = []
        self.equipment = []
        self.plans = []
        self.subscriptions = []

    def add_customer(self, customer: Customer):
        if customer in self.customers:
            return

        self.customers.append(customer)

    def add_trainer(self, trainer: Trainer):
        if trainer in self.trainers:
            return

        self.trainers.append(trainer)

    def add_equipment(self, equipment: Equipment):
        if equipment in self.equipment:
            return

        self.equipment.append(equipment)

    def add_plan(self, plan: ExercisePlan):
        if plan in self.plans:
            return

        self.plans.append(plan)

    def add_subscription(self, subscription: Subscription):
        if subscription in self.subscriptions:
            return

        self.subscriptions.append(subscription)

    @staticmethod
    def find_by_id(objects, obj_id):
        for obj in objects:
            if obj.id == obj_id:
                return obj

    def subscription_info(self, subscription_id):
        subscription = self.find_by_id(self.subscriptions, subscription_id)
        customer = self.find_by_id(self.customers, subscription.customer_id)
        trainer = self.find_by_id(self.trainers, subscription.trainer_id)
        exercise_plan = self.find_by_id(self.plans, subscription.exercise_id)
        equipment = self.find_by_id(self.equipment, exercise_plan.equipment_id)

        return repr(subscription) + "\n" + repr(customer) + "\n" + repr(trainer) + "\n" + repr(equipment) + "\n" + \
               repr(exercise_plan)
    class Subscription:
    id = 0

    def __init__(self, date: str, customer_id: int, trainer_id: int, exercise_id: int):
        self.date = date
        self.customer_id = customer_id
        self.trainer_id = trainer_id
        self.exercise_id = exercise_id
        self.id = self.get_next_id()

    @staticmethod
    def get_next_id():
        Subscription.id += 1
        return Subscription.id

    def __repr__(self):
        return f"Subscription <{self.id}> on {self.date}"
 
 class Trainer:
    id = 0

    def __init__(self, name):
        self.name = name
        self.id = self.get_next_id()

    @staticmethod
    def get_next_id():
        Trainer.id += 1
        return Trainer.id

    def __repr__(self):
        return f"Trainer <{self.id}> {self.name}"

    
