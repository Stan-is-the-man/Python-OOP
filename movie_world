class Customer:
    def __init__(self, name, age, id):
        self.name = name
        self.age = age
        self.id = id
        self.rented_dvds = []

    def __repr__(self):
        name_of_rented_dvds = [dvd.name for dvd in self.rented_dvds]
        return f"{self.id}: {self.name} of age {self.age} has {len(self.rented_dvds)} rented DVD's ({', '.join(name_of_rented_dvds)})"

class DVD:
    def __init__(self, name, id, creation_year, creation_month: str, age_restriction):
        self.name = name
        self.id = id
        self.creation_year = creation_year
        self.creation_month = creation_month
        self.age_restriction = age_restriction
        self.is_rented = False

    @classmethod
    def from_date(cls, id, name, date: str, age_restriction):
        date_split = date.split(".")
        year = int(date_split[2])
        month = int(date_split[1])
        month_num_to_str = {1: "January",
                            2: "February",
                            3: "March",
                            4: "April",
                            5: "May",
                            6: "June",
                            7: "July",
                            8: "August",
                            9: "September",
                            10: "October",
                            11: "November",
                            12: "December"}
        month_in_str = month_num_to_str[month]
        return cls(name, id, year, month_in_str, age_restriction)

    def __repr__(self):
        dvd_status = "rented" if self.is_rented else "not rented"
        return f"{self.id}: {self.name} ({self.creation_month} {self.creation_year}) has age restriction {self.age_restriction}. Status: {dvd_status}"


from movie_world.customer import Customer
from movie_world.dvd import DVD


class MovieWorld:
    DVD_CAPACITY = 15
    CUSTOMER_CAPACITY = 10

    def __init__(self, name):
        self.name = name
        self.customers = []
        self.dvds = []

    @staticmethod
    def dvd_capacity():
        return MovieWorld.DVD_CAPACITY

    @staticmethod
    def customer_capacity():
        return MovieWorld.CUSTOMER_CAPACITY

    def add_customer(self, customer: Customer):
        # if len(self.customers) == MovieWorld.customer_capacity(): - with the staticmethod
        if len(self.customers) == MovieWorld.CUSTOMER_CAPACITY:
            return
        self.customers.append(customer)

    def add_dvd(self, dvd: DVD):
        if len(self.dvds) == MovieWorld.DVD_CAPACITY:
            return
        self.dvds.append(dvd)

    def rent_dvd(self, customer_id, dvd_id):
        # Взимаме си обектите
        #1: John of age 16 has 0 rented DVD's () - customer
        #1: Black Widow (April 2020) has age restriction 18. Status: not rented - dvd
        customer = self.__find_by_id(self.customers, customer_id)
        dvd = self.__find_by_id(self.dvds, dvd_id)

        if dvd in customer.rented_dvds:
            return f"{customer.name} has already rented {dvd.name}"
        if dvd not in customer.rented_dvds and dvd.is_rented:
            return "DVD is already rented"
        if customer.age < dvd.age_restriction:
            return f"{customer.name} should be at least {dvd.age_restriction} to rent this movie"
        customer.rented_dvds.append(dvd)
        dvd.is_rented = True
        return f"{customer.name} has successfully rented {dvd.name}"

    @staticmethod
    def __find_by_id(list_of_customers_or_dvd, customer_or_dvd_id):
        for cust_or_dvd in list_of_customers_or_dvd:
            if cust_or_dvd.id == customer_or_dvd_id:
                return cust_or_dvd

    def return_dvd(self, customer_id, dvd_id):
        customer = self.__find_by_id(self.customers, customer_id)
        dvd = self.__find_by_id(self.dvds, dvd_id)
        if dvd not in customer.rented_dvds:
            return f"{customer.name} does not have that DVD"

        customer.rented_dvds.remove(dvd)
        dvd.is_rented = False
        return f"{customer.name} has successfully returned {dvd.name}"

    def __repr__(self):
        all_customers = [repr(cust) for cust in self.customers]
        all_dvds = [repr(dvd) for dvd in self.dvds]
        result = "\n".join(all_customers) + "\n"
        result += "\n".join(all_dvds)

        return result
